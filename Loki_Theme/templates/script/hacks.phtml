<?php
declare(strict_types=1);

use Loki\Theme\ViewModel\FormKeyValue;
use Magento\Framework\View\Element\Template;

/** @var Template $block */
/** @var FormKeyValue $formKeyValue */

$formKeyValue = $block->getFormKeyValue();
?>
<script>
    var BASE_URL = '<?= $block->getBaseUrl() ?>';
    var FORM_KEY = '<?= $formKeyValue->get() ?>';

    document.addEventListener('alpine:init', () => {
        Alpine.store('LumaLocalStorage', {
            key: 'mage-cache-storage',
            data: {},
            init() {
                const stored = localStorage.getItem(this.key);
                this.data = stored ? JSON.parse(stored) : null;

                if (!this.data) {
                    this.refresh();
                }
            },
            save() {
                localStorage.setItem(this.key, JSON.stringify(this.data));
            },
            refresh(sections) {
                let url = BASE_URL + '/customer/section/load';
                if (sections) {
                    url += '?sections=' + sections;
                }

                fetch(url)
                    .then((response) => {
                        return response.json();
                    })
                    .then(newData => {
                        if (typeof newData === 'object') {
                            this.data = Object.assign(this.get(), newData);
                            this.save();
                        }
                    })
            },
            get(key) {
                if (!this.data) {
                    return {};
                }

                if (key === undefined) {
                    return this.data;
                }

                if (!this.data.hasOwnProperty(key) || !this.data[key] ) {
                    this.refresh(key);
                }

                return this.data[key];
            },
            set(key, value) {
                this.data[key] = value;
                this.save();
            },
            remove(key) {
                delete this.data[key];
                this.save();
            },
            clear() {
                this.data = {};
                localStorage.removeItem(this.key);
            }
        });

        Alpine.data('LumaTabs', () => ({
            init() {
                const tabAnchors = [...this.$el.querySelectorAll('a[data-toggle="trigger"]')];
                tabAnchors.forEach(anchor => {
                    anchor.addEventListener('click', (e) => {
                        e.preventDefault();
                        tabAnchors.forEach(anchor => {
                            anchor.parentNode.classList.remove('active');
                        })

                        const href = e.target.getAttribute('href').replace(/#/g, '');
                        const target = document.getElementById(href);
                        href.parentNode.classList.add('active');
                        target.style.display = 'block';
                    })
                });
            }
        }));

        Alpine.data('LumaMessages', () => ({
            init() {
                let messagesFromStore = [];
                const messageSection = Alpine.store('LumaLocalStorage').get('messages');
                if (messageSection && messageSection.messages) {
                    messagesFromStore = Object.values(messageSection.messages);
                }

                const messages = [
                    ...messagesFromStore,
                    ...this.getMessagesFromCookie()
                ];

                /*
                const messages = [
                    {type: 'error', text: 'Example error'},
                    {type: 'warning', text: 'Example warning'},
                    {type: 'success', text: 'Example success'},
                    {type: 'notice', text: 'Example notice'},
                ];
                 */

                const messagesElement = [...this.$el.getElementsByClassName('messages')][0];
                messages.forEach(message => {
                    const messageElement = document.createElement('div');
                    messageElement.addEventListener('click', (e) => {
                        messagesElement.removeChild(messageElement);
                    });
                    messageElement.classList.add('message');
                    messageElement.classList.add('message-' + message.type);
                    messageElement.classList.add(message.type);
                    messageElement.role = 'alert'
                    messageElement.innerHTML = message.text;

                    messagesElement.appendChild(messageElement);
                })
            },
            getMessagesFromCookie() {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; mage-messages=`);
                if (parts.length !== 2) {
                    return [];
                }

                document.cookie = "mage-messages=";
                const part = parts.pop().split(";").shift();
                if (!part) {
                    return [];
                }

                const decoded = decodeURIComponent(part);
                if (!decoded) {
                    return [];
                }

                return JSON.parse(decoded);
            }
        }));

        Alpine.data('LumaFormSubscribe', () => ({
            init() {
                const button = this.$el.getElementsByTagName('button')[0];
                const form = document.getElementById('newsletter-validate-detail');
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    const email = document.getElementById('newsletter').value;
                    if (!email) {
                        // @todo: Give an error
                        return;
                    }

                    // @todo Validate email
                    Alpine.store('LumaLocalStorage').remove('messages');

                    var formKeyInput = document.createElement('input');
                    formKeyInput.name = 'form_key';
                    formKeyInput.value = window.FORM_KEY;
                    form.appendChild(formKeyInput);

                    form.submit();
                });
            }
        }));
    });
</script>
