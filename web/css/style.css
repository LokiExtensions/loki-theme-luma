.message {
    --message-success-bgcolor: green;
    --message-success-color: white;
}
/**
 * Fylgja (https://fylgja.dev)
 * Licensed under MIT Open Source
 */
*,
::before,
::after {
  box-sizing: border-box;
  border: 0 solid;
}
:root {
  --root-bg: hsl(0, 0%, 100%);
  --root-fg: hsl(0, 0%, 8%);
  --family-system: system-ui, sans-serif;
  --family-mono: ui-monospace, Menlo, Consolas, monospace;
  --select-light-scheme: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="hsl(0 0% 0%)"><path d="m6 9 6 6 6-6"/></svg>');
  --select-dark-scheme: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="hsl(0 0% 100%)"><path d="m6 9 6 6 6-6"/></svg>');
  --outline-transition: outline-offset 150ms cubic-bezier(0.25, 0, 0.4, 1);
  --surface-color: color-mix(in srgb, var(--root-bg) 94%, var(--root-fg));
}
:where(:focus-visible) {
  outline: var(--outline-size, 2px) solid;
  outline-offset: var(--outline-offset, 2px);
}
:where(:active:focus-visible) {
  outline-offset: 0;
  transition: var(--outline-transition);
}
:target {
  scroll-margin-block: var(--anchor-offset, 6ex);
}
:where(html) {
  block-size: 100%;
  font-family: var(--family-system);
  tab-size: 4;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
  scrollbar-gutter: stable;
}
@media (prefers-reduced-motion: no-preference) {
  :where(html):has(:target) {
    scroll-behavior: smooth;
  }
}
:where(body) {
  min-block-size: 100%;
  margin: 0;
  background-color: var(--root-bg);
  color: var(--root-fg);
  font-size: var(--font-size, 1rem);
  line-height: var(--line-height, 1.6);
}
:where(:any-link,
button,
input,
label[for],
select,
summary,
textarea,
[tabindex]:not([tabindex^="-"])) {
  touch-action: manipulation;
}
:where(:any-link,
button,
label[for],
label:has(input:is([type=radio], [type=checkbox]):enabled),
select:has(option:enabled),
summary) {
  cursor: pointer;
}
:where([type=button], [type=submit], [type=reset], button),
::file-selector-button {
  appearance: button;
}
:where(summary) {
  display: list-item;
}
:where(summary > *) {
  display: inline;
}
:disabled {
  cursor: not-allowed;
}
:where(img, svg, video, canvas, audio, iframe, embed, object) {
  display: block;
  max-inline-size: 100%;
}
:where(img, svg, iframe) {
  block-size: auto;
}
:where(iframe) {
  aspect-ratio: var(--aspect-ratio, 16/9);
}
[hidden]:not([hidden=until-found]) {
  display: none;
}
:root {
  --text-flow: 1em 1rem;
  --separator-flow: 2.5em;
  --list-flow: 0.5em;
  --h-size: 1.125rem;
  --h-weight: 700;
  --h-line: 1.1;
  --h1-size: 3rem;
  --h2-size: 2rem;
  --h3-size: 1.625rem;
  --h4-size: 1.375rem;
}
:where(h1, h2, h3, h4, h5, h6, p, dl, ul, ol, pre, hgroup) {
  margin-block: var(--text-flow);
}
:where(blockquote, figure, hr) {
  margin-block: var(--separator-flow);
  margin-inline: 0;
}
:where(h1, h2, h3, h4, h5, h6) {
  font-size: var(--h-size);
  font-weight: var(--h-weight);
  line-height: var(--h-line);
  text-wrap: balance;
}
:where(h1) {
  --h-size: var(--h1-size);
}
:where(h2) {
  --h-size: var(--h2-size);
}
:where(h3) {
  --h-size: var(--h3-size);
}
:where(h4) {
  --h-size: var(--h4-size);
}
:where(p, li, dd) {
  text-wrap: pretty;
}
:where(:any-link) {
  color: inherit;
}
:where(mark, :not(pre) > code) {
  padding: 0.0625em 0.25em;
}
:where(blockquote) {
  border-inline-start: 4px solid;
  padding-inline-start: 1.5em;
  padding-block: 0.25em;
}
:where(pre) {
  padding: 0.5em 1em;
  white-space: pre;
  overflow: auto;
}
:where(input, button, textarea, select, address),
::file-selector-button {
  font: inherit;
}
:where(:is(ul, ol)[role=list], nav :is(ul, ol)) {
  --list-flow: 0;
  list-style: none;
  margin-block: 0;
  padding-inline-start: 0;
}
:where(hgroup > *),
:where(dl, ol, ul) :where(dl, ol, ul) {
  margin-block: 0;
}
:where(dt) {
  font-weight: 500;
}
:where(li + li, dd + dt) {
  margin-block-start: var(--list-flow);
}
:where(dd) {
  margin-inline-start: 0;
}
:where(hr) {
  height: auto;
  border-block-end-width: 2px;
  color: inherit;
}
:where(sub, sup) {
  position: relative;
  font-size: 0.75em;
  line-height: 0;
  vertical-align: baseline;
}
:where(sub) {
  bottom: -0.25em;
}
:where(sup) {
  top: -0.5em;
}
:where(code, pre, kbd, samp) {
  font-family: var(--family-mono);
}
:where(code, pre) {
  writing-mode: lr;
  direction: ltr;
}
:where(pre, :not(pre) > code) {
  border-radius: var(--code-radius, 0.3em);
  border: 1px solid var(--code-stroke, rgba(0, 0, 0, 0.2));
  background: var(--code-bg,  var(--surface-color));
  color: var(--code-color);
}
:where(table) {
  border-spacing: 0;
  border-color: var(--table-stroke, #777);
}
:where(thead, tbody, tfoot, tr, th, td) {
  border-color: inherit;
  text-align: inherit;
}
:where(th, td) {
  padding-block: var(--table-py, 0.875em);
  padding-inline: var(--table-px, 0.625em);
  background: var(--root-bg);
  color: var(--root-fg);
}
:where(tr + tr :is(th, td)) {
  border-block-start-width: 1px;
}
:where(thead tr:last-child :is(th, td)) {
  border-block-end-width: 2px;
}
:where(tfoot tr:first-child :is(th, td)) {
  border-block-start-width: 2px;
}
:where(input:not([type=range], [type=button], [type=reset], [type=submit]), textarea, select, .form-input) {
  appearance: none;
  margin: 0;
  padding-block: var(--form-py, 0.4375rem);
  padding-inline: var(--form-px, 0.8rem);
  border-width: var(--form-border-width, 1px);
  border-color: var(--form-stroke);
  border-radius: var(--form-radius, 0.35rem);
  background: var(--form-bg, var(--root-bg));
  color: var(--form-color, var(--root-fg));
  transition: color 250ms, background-color 250ms, border-color 250ms, box-shadow 250ms;
}
:where(input:not([type=range], [type=button], [type=reset], [type=submit]), textarea, select):placeholder-shown {
  text-overflow: ellipsis;
}
:where(input:not([type=range], [type=button], [type=reset], [type=submit]), textarea, select):focus-visible {
  border-color: var(--form-active-color);
}
:where(input:not([type=range], [type=button], [type=reset], [type=submit]), textarea, select):disabled {
  box-shadow: none;
  cursor: not-allowed;
}
:where(input:not([type=checkbox], [type=radio], [type=range], [type=button], [type=reset], [type=submit]), textarea, select) {
  --outline-size: 1px;
  --outline-offset: calc(
  	(var(--form-border-width, 1px) + 1px) * -1
  );
  display: block;
  max-inline-size: 100%;
  inline-size: 100%;
}
:where(input:not([type=checkbox], [type=radio], [type=range], [type=button], [type=reset], [type=submit]), textarea, select):is(:disabled, [readonly]:not(:focus)) {
  border-style: var(--form-disabled-border-style, dashed);
}
:where(input[type=checkbox], input[type=radio]) {
  --_gap: var(--icon-gap, 2px);
  block-size: var(--control-size, 1.25em);
  inline-size: var(--control-size, 1.25em);
  border-radius: var(--control-radius, 0.35rem);
  border-width: var(--control-border-width, 2px);
  padding: var(--_gap);
  user-select: none;
}
:where(input[type=checkbox], input[type=radio]):not(:disabled) {
  cursor: pointer;
}
:where(input[type=checkbox], input[type=radio])::after {
  content: "";
  display: block;
  block-size: 100%;
  inline-size: 100%;
  border-radius: inherit;
  background-color: var(--icon-color, currentcolor);
  scale: var(--_show-icon, 0);
  opacity: var(--_show-icon, 0);
  transition: translate 0.15s, scale 0.15s, opacity 0.15s;
  forced-color-adjust: none;
  -webkit-mask: var(--_icon) center/contain no-repeat;
  mask: var(--_icon) center/contain no-repeat;
}
:where(input[type=checkbox], input[type=radio]):checked {
  --_show-icon: 1;
  outline-color: var(--control-checked-stroke, var(--root-fg));
  border-color: var(--control-checked-stroke, var(--root-fg));
  background-color: var(--control-checked-bg, var(--root-fg));
  color: var(--control-checked-color, var(--root-bg));
}
:where(input[type=radio]) {
  --_gap: 3px;
  --control-radius: 50%;
}
:where(input[type=checkbox]:not([role=switch])) {
  --_gap: 1px;
  --_icon: url("#");
  --checked-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='4'%3E%3Cpath d='M20 6 9 17l-5-5'/%3E %3C/svg%3E");
  --indeterminate-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='4'%3E%3Cpath d='M5 12h14'/%3E%3C/svg%3E");
}
:where(input[type=checkbox]:not([role=switch])):indeterminate {
  --_show-icon: 1;
  --_icon: var(--indeterminate-icon);
}
:where(input[type=checkbox]:not([role=switch])):checked {
  --_icon: var(--checked-icon);
}
:where(input[type=checkbox][role=switch]) {
  --_show-icon: 1;
  --control-radius: 1.25em;
  inline-size: var(--switch-size, 2em);
}
:where(input[type=checkbox][role=switch])::after {
  inline-size: auto;
  aspect-ratio: 1;
}
:where(input[type=checkbox][role=switch]):checked {
  --_offset-x: calc(
  	var(--switch-size, 2em) -
  	var(--control-size, 1.25em)
  );
}
:where(input[type=checkbox][role=switch]):checked::after {
  translate: var(--_offset-x) 0%;
}
:where(input[type=checkbox][role=switch]):checked:dir(rtl)::after {
  translate: calc(var(--_offset-x) / -1) 0%;
}
:where(input[type=color]) {
  --form-py: 3px;
  --form-px: 3px;
  block-size: var(--block-size, 2.5em);
  inline-size: var(--inline-size, 2.5em);
}
:where(input[type=color])::-webkit-color-swatch-wrapper {
  padding: 0;
  border-radius: inherit;
}
:where(input[type=color])::-moz-color-swatch {
  border: 0;
  border-radius: inherit;
}
:where(input[type=color])::-webkit-color-swatch {
  border: 0;
  border-radius: inherit;
}
:where(input[type=file]) {
  --form-py: 0;
  --form-px: 0 0.8rem;
  --btn-radius: 0;
  --btn-border-width: 0;
  overflow: clip;
}
:where(input[type=file])::file-selector-button {
  margin-inline-end: 1em;
}
:where(select) {
  inline-size: auto;
  word-wrap: normal;
}
:where(select:not([size]:not([size="1"]), [multiple])) {
  --icon-size: var(--select-icon-size, 1.25em);
  --icon-offset: var(--select-icon-offset, 0.8rem);
  padding-inline-end: calc(var(--icon-size) + var(--icon-offset) + 0.5ch);
  background: var(--select-icon, var(--select-light-scheme)) var(--form-bg, var(--root-bg)) var(--icon-position, right) var(--icon-offset) center/var(--icon-size) no-repeat;
  -webkit-print-color-adjust: exact;
  print-color-adjust: exact;
}
:where(select:not([size]:not([size="1"]), [multiple])):dir(rtl) {
  --icon-position: left;
}
:where(textarea) {
  resize: vertical;
}
:where(textarea:not([row])) {
  min-block-size: var(--textarea-min-size, calc(3.5lh + var(--form-py, 0.4375rem)));
  field-sizing: content;
}
::placeholder {
  opacity: 1;
  color: color-mix(in srgb, currentcolor 54%, transparent);
}
:where(fieldset) {
  min-inline-size: 0;
  margin: 0;
  padding: 0;
}
:where(legend) {
  padding: 0;
}
::-webkit-search-decoration {
  -webkit-appearance: none;
}
::-webkit-datetime-edit,
::-webkit-datetime-edit-fields-wrapper,
::-webkit-datetime-edit-year-field,
::-webkit-datetime-edit-month-field,
::-webkit-datetime-edit-day-field,
::-webkit-datetime-edit-hour-field,
::-webkit-datetime-edit-minute-field,
::-webkit-datetime-edit-second-field,
::-webkit-datetime-edit-millisecond-field,
::-webkit-datetime-edit-meridiem-field {
  display: inline;
  padding-block: 0;
}
::-webkit-date-and-time-value {
  min-height: 1lh;
  text-align: inherit;
}
::-webkit-calendar-picker-indicator {
  line-height: 1;
}
:where([list]:not([type*=date], [type=month], [type=week], [type=time])) {
  --datalist-icon: var(--select-icon, var(--chevron-light-scheme));
}
:where([list]:not([type*=date], [type=month], [type=week], [type=time]))::-webkit-calendar-picker-indicator {
  display: block !important;
  background: var(--datalist-icon) center/contain no-repeat;
  opacity: 1;
}
:where([list]:not([type*=date], [type=month], [type=week], [type=time]))::-webkit-list-button {
  appearance: none;
  block-size: 1em;
  inline-size: 1em;
  padding: 3px;
  align-self: center;
  background: var(--datalist-icon) center/contain no-repeat;
}
:where(button, [type=button], [type=submit], [type=reset], .btn),
::file-selector-button {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  gap: var(--btn-gap, 0.5em);
  padding-block: var(--btn-py, 0.375rem);
  padding-inline: var(--btn-px, 0.8rem);
  border-radius: var(--btn-radius, 0.5rem);
  border-width: var(--btn-border-width, 2px);
  border-color: var(--btn-stroke);
  background: var(--btn-bg, transparent);
  color: var(--btn-color, currentcolor);
  font-weight: var(--btn-font-weight, 500);
  text-decoration: none;
  transition: color 0.2s, background-color 0.2s, border-color 0.2s, box-shadow 0.2s, var(--outline-transition);
  user-select: none;
  cursor: pointer;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}
:where(button, [type=button], [type=submit], [type=reset], .btn) {
  vertical-align: middle;
}
:where(button, [type=button], [type=submit], [type=reset], .btn):hover,
::file-selector-button:hover {
  border-color: var(--btn-hover-stroke, var(--btn-stroke));
  background-color: var(--btn-hover-bg, var(--btn-bg, color-mix(in srgb, currentcolor, transparent 86%)));
  color: var(--btn-hover-color, var(--btn-color, currentcolor));
}
:where(button, [type=button], [type=submit], [type=reset], .btn):is(:active, .is-active, [aria-current=page], [aria-current=true], [aria-selected=true], :where(:has(input:checked))) {
  border-color: var(--btn-active-stroke, var(--btn-stroke));
  background-color: var(--btn-active-bg, var(--btn-bg, color-mix(in srgb, currentcolor, transparent 78%)));
  color: var(--btn-active-color, var(--btn-color, currentcolor));
}
:where(button, [type=button], [type=submit], [type=reset], .btn):is(:disabled [aria-disabled=true]),
:disabled::file-selector-button {
  box-shadow: none;
  border-color: var(--btn-disabled-stroke);
  background-color: var(--btn-disabled-bg, color-mix(in srgb, var(--root-bg) 90%, var(--root-fg)));
  color: var(--btn-disabled-color, color-mix(in srgb, var(--root-fg) 40%, var(--root-bg)));
  cursor: not-allowed;
}
:where(dialog) {
  --backdrop: hsla(0, 0%, 0%, 0.3);
  --ty: var(--dialog-translate-y, 2rem);
  --tx: var(--dialog-translate-x, 0);
  --speed: var(--dialog-close-speed, 300ms);
  --screen-y: 2rem;
  --screen-x: 2rem;
  --my: auto;
  --mx: auto;
  position: fixed;
  max-block-size: calc(100% - var(--screen-y));
  max-inline-size: calc(100% - var(--screen-x));
  background-color: var(--dialog-bg,  color-mix(in oklab, var(--root-bg) 88%, white));
  color: var(--dialog-color,  var(--root-fg));
  border-radius: 1rem;
  margin-block: var(--my);
  margin-inline: var(--mx);
  padding: 1.5rem;
  box-shadow: var(--dialog-shadow, 0 3px 5px hsla(0, 0%, 0%, 0.18));
  translate: var(--tx) var(--ty);
  opacity: 0;
}
:where(dialog)::backdrop {
  background-color: var(--backdrop);
}
@media (prefers-reduced-motion: no-preference) {
  :where(dialog) {
    transition-property: translate, opacity, display, overlay;
    transition-duration: var(--speed);
    transition-behavior: allow-discrete;
  }
}
:where(dialog:is([open], :popover-open)) {
  --speed: var(--dialog-open-speed, 400ms);
  opacity: 1;
  translate: 0 0;
}
@starting-style {
  :where(dialog:is([open], :popover-open)) {
    opacity: 0;
    translate: var(--tx) var(--ty);
  }
}
:where(:root:has(dialog[open]:modal)) {
  overflow: hidden;
}
@media print {
  :root {
    --root-bg: white;
    --root-fg: black;
  }
  :is(h1, h2, h3, h4, h5, h6) {
    page-break-after: avoid;
  }
  :is(h2, h3, h4, h5, h6, p) {
    orphans: 3;
    widows: 3;
  }
  :is(tr, img, svg, pre, blockquote) {
    page-break-inside: avoid;
  }
  abbr[title]::after {
    content: " (" attr(title) ")";
  }
  a[href^="https://"]::after {
    content: " (" attr(href) ")";
  }
  thead {
    display: table-header-group;
  }
  :is(input, select, textarea, button, .btn) {
    -webkit-print-color-adjust: exact;
    print-color-adjust: exact;
  }
}
:where(:root) {
  --ratio-box: 1;
  --ratio-landscape: 4 / 3;
  --ratio-portrait: 3 / 4;
  --ratio-widescreen: 16 / 9;
  --ratio-superwide: 21 / 9;
  --ratio-ultrawide: 18 / 5;
  --ratio-golden: 1.618 / 1;
  --border-size-1: 1px;
  --border-size-2: 2px;
  --border-size-3: 4px;
  --border-size-4: 8px;
  --border-size-5: 12px;
  --radius-1: .125rem;
  --radius-2: .25rem;
  --radius-3: .5rem;
  --radius-4: 1rem;
  --radius-5: 2rem;
  --radius-6: 3rem;
  --radius-full: 100000px;
  --ease-1: cubic-bezier(.25, .1, .1, 1);
  --ease-2: cubic-bezier(.25, .1, .2, 1);
  --ease-3: cubic-bezier(.25, .1, .3, 1);
  --ease-4: cubic-bezier(.25, .1, .4, 1);
  --ease-5: cubic-bezier(.25, .1, .5, 1);
  --ease-in-1: cubic-bezier(.3, 0, 1, 1);
  --ease-in-2: cubic-bezier(.5, 0, 1, 1);
  --ease-in-3: cubic-bezier(.7, 0, 1, 1);
  --ease-in-4: cubic-bezier(.9, 0, 1, 1);
  --ease-in-5: cubic-bezier(1, 0, 1, 1);
  --ease-out-1: cubic-bezier(0, 0, .7, 1);
  --ease-out-2: cubic-bezier(0, 0, .5, 1);
  --ease-out-3: cubic-bezier(0, 0, .3, 1);
  --ease-out-4: cubic-bezier(0, 0, .1, 1);
  --ease-out-5: cubic-bezier(0, 0, 0, 1);
  --ease-in-out-1: cubic-bezier(.1, 0, .9, 1);
  --ease-in-out-2: cubic-bezier(.3, 0, .7, 1);
  --ease-in-out-3: cubic-bezier(.5, 0, .5, 1);
  --ease-in-out-4: cubic-bezier(.7, 0, .3, 1);
  --ease-in-out-5: cubic-bezier(.9, 0, .1, 1);
  --ease-elastic-in-1: cubic-bezier(.5, .25, .75, -.25);
  --ease-elastic-in-2: cubic-bezier(.5, 0, .75, -.25);
  --ease-elastic-in-3: cubic-bezier(.5, -.25, .75, -.25);
  --ease-elastic-in-4: cubic-bezier(.5, -.5, .75, -.25);
  --ease-elastic-in-5: cubic-bezier(.5, -.75, .75, -.25);
  --ease-elastic-out-1: cubic-bezier(.5, .75, .75, 1.25);
  --ease-elastic-out-2: cubic-bezier(.5, 1, .75, 1.25);
  --ease-elastic-out-3: cubic-bezier(.5, 1.25, .75, 1.25);
  --ease-elastic-out-4: cubic-bezier(.5, 1.5, .75, 1.25);
  --ease-elastic-out-5: cubic-bezier(.5, 1.75, .75, 1.25);
  --ease-elastic-in-out-1: cubic-bezier(.5, -.1, .1, 1.5);
  --ease-elastic-in-out-2: cubic-bezier(.5, -.3, .1, 1.5);
  --ease-elastic-in-out-3: cubic-bezier(.5, -.5, .1, 1.5);
  --ease-elastic-in-out-4: cubic-bezier(.5, -.7, .1, 1.5);
  --ease-elastic-in-out-5: cubic-bezier(.5, -.9, .1, 1.5);
  --font-size-1: .875rem;
  --font-size-2: 1rem;
  --font-size-3: 1.125rem;
  --font-size-4: 1.25rem;
  --font-size-5: 1.5rem;
  --font-size-6: 2rem;
  --font-size-7: 2.5rem;
  --font-size-8: 3rem;
  --font-size-9: 3.5rem;
  --font-size-fluid-1: clamp(.875rem, 1.5cqi, 1rem);
  --font-size-fluid-2: clamp(1rem, 2cqi, 1.125rem);
  --font-size-fluid-3: clamp(1.25rem, 2cqi, 1.5rem);
  --font-size-fluid-4: clamp(1.5rem, 3cqi, 2rem);
  --font-size-fluid-5: clamp(2rem, 5cqi, 3.5rem);
  --line-height-1: 1.1;
  --line-height-2: 1.25;
  --line-height-3: 1.375;
  --line-height-4: 1.5;
  --line-height-5: 1.8;
  --hue-pink: 350;
  --hue-purple: 330;
  --hue-violet: 310;
  --hue-indigo: 290;
  --hue-blue: 260;
  --hue-cyan: 220;
  --hue-teal: 170;
  --hue-green: 140;
  --hue-lime: 125;
  --hue-yellow: 96;
  --hue-orange: 70;
  --hue-red: 25;
  --spacing: .25rem;
  --size-1: calc(var(--spacing) * 1);
  --size-2: calc(var(--spacing) * 2);
  --size-3: calc(var(--spacing) * 3);
  --size-4: calc(var(--spacing) * 4);
  --size-5: calc(var(--spacing) * 5);
  --size-6: calc(var(--spacing) * 6);
  --size-7: calc(var(--spacing) * 7);
  --size-8: calc(var(--spacing) * 8);
  --size-9: calc(var(--spacing) * 9);
  --size-10: calc(var(--spacing) * 10);
  --size-12: calc(var(--spacing) * 12);
  --size-14: calc(var(--spacing) * 14);
  --size-16: calc(var(--spacing) * 16);
  --size-18: calc(var(--spacing) * 18);
  --size-20: calc(var(--spacing) * 20);
  --size-24: calc(var(--spacing) * 24);
  --size-28: calc(var(--spacing) * 28);
  --size-32: calc(var(--spacing) * 32);
  --size-36: calc(var(--spacing) * 36);
  --size-40: calc(var(--spacing) * 40);
  --size-50: calc(var(--spacing) * 50);
  --size-60: calc(var(--spacing) * 60);
  --size-70: calc(var(--spacing) * 70);
  --size-80: calc(var(--spacing) * 80);
  --size-90: calc(var(--spacing) * 90);
  --size-100: calc(var(--spacing) * 100);
  --size-120: calc(var(--spacing) * 120);
  --size-05: calc(var(--spacing) * .5);
  --size-heading: 36ch;
  --size-content: 64ch;
  --layer-1: 1;
  --layer-2: 2;
  --layer-3: 4;
  --layer-4: 6;
  --layer-5: 8;
}
@media (prefers-color-scheme: dark) {
  :where(:root) {
    --shadow-color: #030407;
    --shadow-strength: 25%;
  }
}
* {
  --color-0: oklch(99% calc(.03 * var(--chroma, 1)) var(--hue, 0));
  --color-1: oklch(95% calc(.06 * var(--chroma, 1)) var(--hue, 0));
  --color-2: oklch(90% calc(.12 * var(--chroma, 1)) var(--hue, 0));
  --color-3: oklch(88% calc(.14 * var(--chroma, 1)) var(--hue, 0));
  --color-4: oklch(82% calc(.16 * var(--chroma, 1)) var(--hue, 0));
  --color-5: oklch(78% calc(.17 * var(--chroma, 1)) var(--hue, 0));
  --color-6: oklch(68% calc(.19 * var(--chroma, 1)) var(--hue, 0));
  --color-7: oklch(58% calc(.21 * var(--chroma, 1)) var(--hue, 0));
  --color-8: oklch(52% calc(.2 * var(--chroma, 1)) var(--hue, 0));
  --color-9: oklch(44% calc(.18 * var(--chroma, 1)) var(--hue, 0));
  --color-10: oklch(35% calc(.15 * var(--chroma, 1)) var(--hue, 0));
  --color-11: oklch(28% calc(.12 * var(--chroma, 1)) var(--hue, 0));
  --color-12: oklch(20% calc(.1 * var(--chroma, 1)) var(--hue, 0));
  --color-13: oklch(15% calc(.07 * var(--chroma, 1)) var(--hue, 0));
  --color-14: oklch(11% calc(.05 * var(--chroma, 1)) var(--hue, 0));
}
@property --hue {
  syntax: "<angle> | <number>";
  inherits: true;
  initial-value: 0;
}
* {
  --shadow-color-umbra: color-mix(in srgb, var(--shadow-color, gray) calc(var(--shadow-strength, 1%)  + 20%), #0000);
  --shadow-color-penumbra: color-mix(in srgb, var(--shadow-color, gray) calc(var(--shadow-strength, 1%)  + 14%), #0000);
  --shadow-color-ambient: color-mix(in srgb, var(--shadow-color, gray) calc(var(--shadow-strength, 1%)  + 12%), #0000);
  --shadow-1: 0 2px 1px -1px var(--shadow-color-umbra), 0 1px 1px var(--shadow-color-penumbra), 0 1px 3px var(--shadow-color-ambient);
  --shadow-2: 0 3px 3px -2px var(--shadow-color-umbra), 0 3px 4px var(--shadow-color-penumbra), 0 1px 8px var(--shadow-color-ambient);
  --shadow-3: 0 3px 5px -1px var(--shadow-color-umbra), 0 6px 10px var(--shadow-color-penumbra), 0 1px 18px var(--shadow-color-ambient);
  --shadow-4: 0 5px 5px -3px var(--shadow-color-umbra), 0 8px 10px 1px var(--shadow-color-penumbra), 0 3px 14px 2px var(--shadow-color-ambient);
  --shadow-5: 0 7px 8px -4px var(--shadow-color-umbra), 0 12px 17px 2px var(--shadow-color-penumbra), 0 5px 22px 4px var(--shadow-color-ambient);
  --shadow-6: 0 8px 10px -5px var(--shadow-color-umbra), 0 16px 24px 2px var(--shadow-color-penumbra), 0 6px 30px 5px var(--shadow-color-ambient);
}
/**
 * Fylgja (https://fylgja.dev)
 * Licensed under MIT Open Source
 */
.clip,
.clip-y {
  overflow-y: clip;
}
.clip,
.clip-x {
  overflow-x: clip;
}
.content-lazy {
  --content-size: 500px;
  content-visibility: auto;
  contain-intrinsic-block-size: var(--content-size);
}
:where(.divide-y, .divide-x) {
  --gap: 0;
  --flow: var(--gap);
  --divide: 1px;
}
:where(.divide-y, .divide-x) > :where(:not(:first-child)) {
  border-color: inherit;
  border-style: inherit;
}
.divide-y > :where(:not(:first-child)) {
  border-block-start-width: var(--divide);
  padding-block: var(--flow) 0;
}
.divide-x > :where(:not(:first-child)) {
  border-inline-start-width: var(--divide);
  padding-inline: var(--flow) 0;
}
.flow-none > *,
.flow > :first-child {
  margin-block: 0;
}
.flow {
  --flow: 1em;
}
.flow > :where(:not(:first-child)) {
  margin-block: var(--flow) 0;
}
.border-gradient, .bg-gradient,
.text-gradient {
  --gradient-from: canvastext;
  --gradient-to: transparent;
  --gradient-stops: var(--gradient-from), var(--gradient-to);
  --gradient-angle: ;
  --gradient-color-space: ;
  --gradient:
  	var(--gradient-angle) var(--gradient-color-space), var(--gradient-stops);
}
@supports (background: linear-gradient(in lab, red, red)) {
  .border-gradient, .bg-gradient,
  .text-gradient {
    --gradient-color-space: in oklab;
  }
}
.bg-gradient,
.text-gradient {
  background: linear-gradient(var(--gradient));
}
@supports (background-clip: text) {
  .text-gradient {
    background-clip: text;
    color: rgba(0, 0, 0, 0);
  }
}
.border-gradient {
  --inner-bg: var(--root-bg, canvas);
  --_inner: var(--inner-bg) 0 0;
  background: linear-gradient(var(--_inner)) padding-box, linear-gradient(var(--gradient)) border-box;
  border-color: rgba(0, 0, 0, 0);
}
.border-gradient:where(.text-gradient) {
  background: linear-gradient(var(--gradient)) text, linear-gradient(var(--_inner)) padding-box, linear-gradient(var(--gradient)) border-box;
}
.line-clamp {
  --line-count: 3;
  display: -webkit-box;
  overflow: hidden;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: var(--line-count);
}
.list-none {
  list-style-type: none;
}
.list-none::-webkit-details-marker {
  display: none;
}
.object-contain {
  object-fit: contain;
}
.object-cover {
  object-fit: cover;
}
.overlay {
  --overlay-bg: hsl(0 0% 0% / 60%);
  --overlay-fg: #fff;
  border-image: 0 fill linear-gradient(0deg, var(--overlay-bg), transparent);
  color: var(--overlay-fg);
}
:where(.relative, .sticky, .absolute, .fixed) {
  --z: 1;
  --inset: auto;
  --inset-y: var(--inset);
  --inset-x: var(--inset);
  z-index: var(--z);
  inset-block: var(--inset-y);
  inset-inline: var(--inset-x);
}
.relative {
  --z: auto;
  position: relative;
}
.sticky {
  --inset-y: 0 auto;
  position: sticky;
}
.absolute {
  position: absolute;
}
.fixed {
  position: fixed;
}
.rounded,
.rounded-conditional {
  --radius: 0.5rem;
  --radius-y: var(--radius);
  --radius-x: var(--radius);
  --radius-t: var(--radius-y);
  --radius-b: var(--radius-x);
  --radius-s: initial;
  --radius-e: initial;
  --_radius-t: var(--radius-t);
  --_radius-b: var(--radius-b);
  --_radius-s: var(--radius-s);
  --_radius-e: var(--radius-e);
  border-start-start-radius: var(--_radius-s, var(--_radius-t));
  border-end-start-radius: var(--_radius-s, var(--_radius-b));
  border-start-end-radius: var(--_radius-e, var(--_radius-t));
  border-end-end-radius: var(--_radius-e, var(--_radius-b));
}
.rounded-conditional {
  --_radius-t: clamp(0px, calc(100cqi - 100%) * 1e5, var(--radius-t));
  --_radius-b: clamp(0px, calc(100cqi - 100%) * 1e5, var(--radius-b));
}
.rounded-none {
  border-radius: 0;
}
.rounded-inherit {
  border-radius: inherit;
}
.round {
  aspect-ratio: 1;
  border-radius: 100000px;
  overflow: clip;
}
@property --mask-color-start {
  inherits: false;
  syntax: "<color>";
  initial-value: #000;
}
@property --mask-color-end {
  inherits: false;
  syntax: "<color>";
  initial-value: #000;
}
@keyframes scroll-mask {
  0% {
    --mask-color-start: #000;
    --mask-color-end: hsl(0 0 0 / 0%);
  }
  2%, 98% {
    --mask-color-start: hsl(0 0 0 / 0%);
    --mask-color-end: hsl(0 0 0 / 0%);
  }
  100% {
    --mask-color-start: hsl(0 0 0 / 0%);
    --mask-color-end: #000;
  }
}
.scroll-mask {
  --mask-dir: 90deg;
  --mask-size: 1.5rem;
  --mask-color-start: #000;
  --mask-color-end: #000;
  --mask: linear-gradient(
  	var(--mask-dir),
  	var(--mask-color-start),
  	#000 var(--mask-size),
  	#000 calc(100% - var(--mask-size)),
  	var(--mask-color-end)
  );
  -webkit-mask-image: var(--mask);
  mask-image: var(--mask);
  animation: scroll-mask;
  animation-timeline: scroll(self inline);
}
.scroll-mask.scroll-y {
  --mask-dir: 180deg;
  animation-timeline: scroll(self block);
}
.scroll-x {
  overflow-x: auto;
  overscroll-behavior-x: contain;
}
.scroll-y {
  overflow-y: auto;
  overscroll-behavior-y: contain;
}
.scrollbar-none {
  scrollbar-width: none;
}
.scrollbar-none::-webkit-scrollbar {
  display: none;
}
.scrollbar-thin {
  scrollbar-width: thin;
}
.scrollbar-thin::-webkit-scrollbar {
  width: 0.4rem;
  height: 0.4rem;
}
.w-full {
  inline-size: 100%;
}
.h-full {
  block-size: 100%;
}
.max-w-full {
  max-inline-size: 100%;
}
.max-h-full {
  max-block-size: 100%;
}
.snap {
  --snap-dir: x mandatory;
  --snap-stop: normal;
  --snap-align: start;
  scroll-snap-type: var(--snap-dir);
  scroll-snap-stop: var(--snap-stop);
  scroll-behavior: smooth;
}
.snap > * {
  scroll-snap-align: var(--snap-align);
}
:where([style*="--size:"]) {
  block-size: var(--size);
  inline-size: var(--size);
}
:where([style*="--m:"]) {
  margin: var(--m);
}
:where([style*="--p:"]) {
  padding: var(--p);
}
:where([style*="--size-y:"]) {
  block-size: var(--size-y);
}
:where([style*="--size-x:"]) {
  inline-size: var(--size-x);
}
:where([style*="--my:"]) {
  margin-block: var(--my);
}
:where([style*="--mx:"]) {
  margin-inline: var(--mx);
}
:where([style*="--py:"]) {
  padding-block: var(--py);
}
:where([style*="--px:"]) {
  padding-inline: var(--px);
}
.stretched-link::after {
  content: "";
  position: absolute;
  inset: 0;
}
:where(details[open] > summary, [aria-expanded=true], [aria-selected=true], [aria-sort=ascending], :is(details[open] > summary, [aria-expanded=true], [aria-selected=true], [aria-sort=ascending]) > :is(.group, .stack)) > .toggle-flip {
  scale: -1;
}
:where(details[open] > summary, [aria-expanded=true], [aria-selected=true], [aria-sort=ascending], :is(details[open] > summary, [aria-expanded=true], [aria-selected=true], [aria-sort=ascending]) > :is(.group, .stack)) > .toggle-turn {
  rotate: 90deg;
}
:where(details[open] > summary, [aria-expanded=true], [aria-selected=true], [aria-sort=ascending], :is(details[open] > summary, [aria-expanded=true], [aria-selected=true], [aria-sort=ascending]) > :is(.group, .stack)) > .toggle-rotate {
  rotate: 180deg;
}
:where(details[open] > summary, [aria-expanded=true], [aria-selected=true], [aria-sort=ascending], :is(details[open] > summary, [aria-expanded=true], [aria-selected=true], [aria-sort=ascending]) > :is(.group, .stack)) > .toggle-hide {
  visibility: hidden;
}
:where(details:not([open]) > summary, [aria-expanded=false], [aria-selected=false], [aria-sort=descending], :is(details:not([open]) > summary, [aria-expanded=false], [aria-selected=false], [aria-sort=descending]) > :is(.group, .stack)) > .toggle-show {
  visibility: hidden;
}
.transition-display, .transition-color, .transition {
  --transition-props: border-color, background-color, color,
  	text-decoration-color, opacity, box-shadow, transform, translate, scale,
  	rotate, filter, backdrop-filter, display, overlay;
  --transition-ease: cubic-bezier(0.5, 0, 0.5, 1);
  --transition-duration: 150ms;
  transition-property: var(--transition-props);
  transition-timing-function: var(--transition-ease);
  transition-duration: var(--transition-duration);
  transition-behavior: allow-discrete;
}
.transition-color {
  --properties: border-color, background-color, color, text-decoration-color;
}
.transition-display {
  --properties: opacity, transform, translate, scale, rotate, display, overlay;
}
.truncate {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
.lead {
  font-size: var(--lead-size, large);
  line-height: inherit;
  font-weight: bold;
}
.font-normal {
  font-weight: normal;
}
.font-bold {
  font-weight: bold;
}
.text-start {
  text-align: start;
}
.text-center {
  text-align: center;
}
.text-end {
  text-align: end;
}
.italic {
  font-style: italic;
}
.not-italic {
  font-style: italic;
}
.nowrap {
  white-space: nowrap;
}
.auto-grid {
  --max-col-size: 14rem;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(min(100%, var(--max-col-size)), 1fr));
}
:where(.grid-cols) {
  display: grid;
}
.grid-cols {
  --grid-cols: 1;
  --_cols: var(--grid-cols);
  grid-template-columns: repeat(var(--_cols), minmax(0, 1fr));
}
.grid-cols > * {
  --row: auto;
  --col: auto;
  --_gridIR: var(--row);
  --_gridIC: var(--col);
  grid-row: var(--_gridIR);
  grid-column: var(--_gridIC);
}
.col-span-full {
  --col: 1 / -1;
}
.grid-flow {
  --grid-flow-size: calc(
  	(100% - var(--_gap, var(--gap, 0px)) * (var(--_cols) - 1)) /
  		var(--_cols)
  );
  grid-template-columns: none;
  grid-auto-flow: column;
  grid-auto-columns: var(--grid-flow-size);
}
:where(.flex, .flex-col, .flex-wrap) {
  --flex-dir: row;
  --flex-wrap: nowrap;
  --_flexD: var(--flex-dir);
  --_flexW: var(--flex-wrap);
  display: flex;
  flex-flow: var(--_flexD) var(--_flexW);
}
.flex-col {
  --flex-dir: column;
}
.flex-wrap {
  --flex-wrap: wrap;
}
.flex-none {
  flex: none;
}
.flex-auto {
  flex: auto;
}
.stack {
  display: grid;
}
.stack > *,
.stack > ::before,
.stack > ::after {
  grid-area: 1/1;
}
:root {
  --container-size: 1280px;
  --container-gap: 1.25rem;
}
.container {
  inline-size: min(100% - var(--container-gap) * 2, var(--container-size));
  margin-inline: auto;
}
.hidden {
  display: none;
}
.block {
  display: block;
}
.inline-block {
  display: inline flow-root;
}
.flow-root {
  display: flow-root;
}
.flex {
  display: flex;
}
.inline-flex {
  display: inline flex;
}
.grid {
  display: grid;
}
.inline-grid {
  display: inline grid;
}
.table-cell {
  display: table-cell;
}
.open\:hidden:where([open], :popover-open) {
  display: none;
}
.open\:block:where([open], :popover-open) {
  display: block;
}
.open\:inline-block:where([open], :popover-open) {
  display: inline flow-root;
}
.open\:flow-root:where([open], :popover-open) {
  display: flow-root;
}
.open\:flex:where([open], :popover-open) {
  display: flex;
}
.open\:inline-flex:where([open], :popover-open) {
  display: inline flex;
}
.open\:grid:where([open], :popover-open) {
  display: grid;
}
.open\:inline-grid:where([open], :popover-open) {
  display: inline grid;
}
.open\:table-cell:where([open], :popover-open) {
  display: table-cell;
}
.align {
  --align: normal space-between;
  --align-items: center legacy;
  --_alignC: var(--align);
  --_alignI: var(--align-items);
  place-content: var(--_alignC);
  place-items: var(--_alignI);
}
.align-center {
  place-content: center;
  place-items: center;
}
.align-self {
  --align-self: start auto;
  --_alignS: var(--align-self);
  place-self: var(--_alignS);
}
.align-self-end {
  place-self: end auto;
}
.gap {
  --gap: 1em;
  --_gap: var(--gap);
  gap: var(--_gap);
}
.gap-sm {
  gap: 0.5em;
}
.sr-only {
  --_show: initial;
  position: var(--_show, absolute);
  block-size: var(--_show, 1px);
  inline-size: var(--_show, 1px);
  overflow: var(--_show, hidden);
  clip-path: var(--_show, inset(50%));
}
@media (width >= 480px) {
  .gap:where([style*="--sm_gap:"]) {
    --_gap: var(--sm_gap);
  }
  :where([style*="--sm_size-y:"]) {
    block-size: var(--sm_size-y);
  }
  :where([style*="--sm_size-x:"]) {
    inline-size: var(--sm_size-x);
  }
  :where([style*="--sm_my:"]) {
    margin-block: var(--sm_my);
  }
  :where([style*="--sm_mx:"]) {
    margin-inline: var(--sm_mx);
  }
  :where([style*="--sm_py:"]) {
    padding-block: var(--sm_py);
  }
  :where([style*="--sm_px:"]) {
    padding-inline: var(--sm_px);
  }
  .sm\:hidden {
    display: none;
  }
  .sm\:block {
    display: block;
  }
  .sm\:inline-block {
    display: inline flow-root;
  }
  .sm\:flow-root {
    display: flow-root;
  }
  .sm\:flex {
    display: flex;
  }
  .sm\:inline-flex {
    display: inline flex;
  }
  .sm\:grid {
    display: grid;
  }
  .sm\:inline-grid {
    display: inline grid;
  }
  .sm\:table-cell {
    display: table-cell;
  }
  :is(.flex, .flex-col, .flex-wrap):where([style*="--sm_flex-dir:"]) {
    --_flexD: var(--sm_flex-dir);
  }
  :is(.flex, .flex-col, .flex-wrap):where([style*="--sm_flex-wrap:"]) {
    --_flexW: var(--sm_flex-wrap);
  }
  .grid-cols:where([style*="--sm_grid-cols:"]) {
    --_cols: var(--sm_grid-cols);
  }
  .grid-cols > :where([style*="--sm_row:"]) {
    --_gridIR: var(--sm_row);
  }
  .grid-cols > :where([style*="--sm_col:"]) {
    --_gridIC: var(--sm_col);
  }
  .align:where([style*="--sm_align:"]) {
    --_alignC: var(--sm_align);
  }
  .align:where([style*="--sm_align-items:"]) {
    --_alignI: var(--sm_--align-items);
  }
  .align-self:where([style*="--sm_align-self:"]) {
    --_alignS: var(--sm_align-self);
  }
  .sm\:sr-only {
    --_show: initial;
  }
  .sm\:not-sr-only {
    --_show: /* */;
  }
}
@media (width >= 768px) {
  .gap:where([style*="--md_gap:"]) {
    --_gap: var(--md_gap);
  }
  :where([style*="--md_size-y:"]) {
    block-size: var(--md_size-y);
  }
  :where([style*="--md_size-x:"]) {
    inline-size: var(--md_size-x);
  }
  :where([style*="--md_my:"]) {
    margin-block: var(--md_my);
  }
  :where([style*="--md_mx:"]) {
    margin-inline: var(--md_mx);
  }
  :where([style*="--md_py:"]) {
    padding-block: var(--md_py);
  }
  :where([style*="--md_px:"]) {
    padding-inline: var(--md_px);
  }
  .md\:hidden {
    display: none;
  }
  .md\:block {
    display: block;
  }
  .md\:inline-block {
    display: inline flow-root;
  }
  .md\:flow-root {
    display: flow-root;
  }
  .md\:flex {
    display: flex;
  }
  .md\:inline-flex {
    display: inline flex;
  }
  .md\:grid {
    display: grid;
  }
  .md\:inline-grid {
    display: inline grid;
  }
  .md\:table-cell {
    display: table-cell;
  }
  :is(.flex, .flex-col, .flex-wrap):where([style*="--md_flex-dir:"]) {
    --_flexD: var(--md_flex-dir);
  }
  :is(.flex, .flex-col, .flex-wrap):where([style*="--md_flex-wrap:"]) {
    --_flexW: var(--md_flex-wrap);
  }
  .grid-cols:where([style*="--md_grid-cols:"]) {
    --_cols: var(--md_grid-cols);
  }
  .grid-cols > :where([style*="--md_row:"]) {
    --_gridIR: var(--md_row);
  }
  .grid-cols > :where([style*="--md_col:"]) {
    --_gridIC: var(--md_col);
  }
  .align:where([style*="--md_align:"]) {
    --_alignC: var(--md_align);
  }
  .align:where([style*="--md_align-items:"]) {
    --_alignI: var(--md_--align-items);
  }
  .align-self:where([style*="--md_align-self:"]) {
    --_alignS: var(--md_align-self);
  }
  .md\:sr-only {
    --_show: initial;
  }
  .md\:not-sr-only {
    --_show: /* */;
  }
}
@media (width >= 1024px) {
  .gap:where([style*="--lg_gap:"]) {
    --_gap: var(--lg_gap);
  }
  :where([style*="--lg_size-y:"]) {
    block-size: var(--lg_size-y);
  }
  :where([style*="--lg_size-x:"]) {
    inline-size: var(--lg_size-x);
  }
  :where([style*="--lg_my:"]) {
    margin-block: var(--lg_my);
  }
  :where([style*="--lg_mx:"]) {
    margin-inline: var(--lg_mx);
  }
  :where([style*="--lg_py:"]) {
    padding-block: var(--lg_py);
  }
  :where([style*="--lg_px:"]) {
    padding-inline: var(--lg_px);
  }
  .lg\:hidden {
    display: none;
  }
  .lg\:block {
    display: block;
  }
  .lg\:inline-block {
    display: inline flow-root;
  }
  .lg\:flow-root {
    display: flow-root;
  }
  .lg\:flex {
    display: flex;
  }
  .lg\:inline-flex {
    display: inline flex;
  }
  .lg\:grid {
    display: grid;
  }
  .lg\:inline-grid {
    display: inline grid;
  }
  .lg\:table-cell {
    display: table-cell;
  }
  :is(.flex, .flex-col, .flex-wrap):where([style*="--lg_flex-dir:"]) {
    --_flexD: var(--lg_flex-dir);
  }
  :is(.flex, .flex-col, .flex-wrap):where([style*="--lg_flex-wrap:"]) {
    --_flexW: var(--lg_flex-wrap);
  }
  .grid-cols:where([style*="--lg_grid-cols:"]) {
    --_cols: var(--lg_grid-cols);
  }
  .grid-cols > :where([style*="--lg_row:"]) {
    --_gridIR: var(--lg_row);
  }
  .grid-cols > :where([style*="--lg_col:"]) {
    --_gridIC: var(--lg_col);
  }
  .align:where([style*="--lg_align:"]) {
    --_alignC: var(--lg_align);
  }
  .align:where([style*="--lg_align-items:"]) {
    --_alignI: var(--lg_--align-items);
  }
  .align-self:where([style*="--lg_align-self:"]) {
    --_alignS: var(--lg_align-self);
  }
  .lg\:sr-only {
    --_show: initial;
  }
  .lg\:not-sr-only {
    --_show: /* */;
  }
}
@media (width >= 1440px) {
  .gap:where([style*="--xl_gap:"]) {
    --_gap: var(--xl_gap);
  }
  :where([style*="--xl_size-y:"]) {
    block-size: var(--xl_size-y);
  }
  :where([style*="--xl_size-x:"]) {
    inline-size: var(--xl_size-x);
  }
  :where([style*="--xl_my:"]) {
    margin-block: var(--xl_my);
  }
  :where([style*="--xl_mx:"]) {
    margin-inline: var(--xl_mx);
  }
  :where([style*="--xl_py:"]) {
    padding-block: var(--xl_py);
  }
  :where([style*="--xl_px:"]) {
    padding-inline: var(--xl_px);
  }
  .xl\:hidden {
    display: none;
  }
  .xl\:block {
    display: block;
  }
  .xl\:inline-block {
    display: inline flow-root;
  }
  .xl\:flow-root {
    display: flow-root;
  }
  .xl\:flex {
    display: flex;
  }
  .xl\:inline-flex {
    display: inline flex;
  }
  .xl\:grid {
    display: grid;
  }
  .xl\:inline-grid {
    display: inline grid;
  }
  .xl\:table-cell {
    display: table-cell;
  }
  :is(.flex, .flex-col, .flex-wrap):where([style*="--xl_flex-dir:"]) {
    --_flexD: var(--xl_flex-dir);
  }
  :is(.flex, .flex-col, .flex-wrap):where([style*="--xl_flex-wrap:"]) {
    --_flexW: var(--xl_flex-wrap);
  }
  .grid-cols:where([style*="--xl_grid-cols:"]) {
    --_cols: var(--xl_grid-cols);
  }
  .grid-cols > :where([style*="--xl_row:"]) {
    --_gridIR: var(--xl_row);
  }
  .grid-cols > :where([style*="--xl_col:"]) {
    --_gridIC: var(--xl_col);
  }
  .align:where([style*="--xl_align:"]) {
    --_alignC: var(--xl_align);
  }
  .align:where([style*="--xl_align-items:"]) {
    --_alignI: var(--xl_--align-items);
  }
  .align-self:where([style*="--xl_align-self:"]) {
    --_alignS: var(--xl_align-self);
  }
  .xl\:sr-only {
    --_show: initial;
  }
  .xl\:not-sr-only {
    --_show: /* */;
  }
}
@media (width >= 1920px) {
  .gap:where([style*="--xxl_gap:"]) {
    --_gap: var(--xxl_gap);
  }
  :where([style*="--xxl_size-y:"]) {
    block-size: var(--xxl_size-y);
  }
  :where([style*="--xxl_size-x:"]) {
    inline-size: var(--xxl_size-x);
  }
  :where([style*="--xxl_my:"]) {
    margin-block: var(--xxl_my);
  }
  :where([style*="--xxl_mx:"]) {
    margin-inline: var(--xxl_mx);
  }
  :where([style*="--xxl_py:"]) {
    padding-block: var(--xxl_py);
  }
  :where([style*="--xxl_px:"]) {
    padding-inline: var(--xxl_px);
  }
  .xxl\:hidden {
    display: none;
  }
  .xxl\:block {
    display: block;
  }
  .xxl\:inline-block {
    display: inline flow-root;
  }
  .xxl\:flow-root {
    display: flow-root;
  }
  .xxl\:flex {
    display: flex;
  }
  .xxl\:inline-flex {
    display: inline flex;
  }
  .xxl\:grid {
    display: grid;
  }
  .xxl\:inline-grid {
    display: inline grid;
  }
  .xxl\:table-cell {
    display: table-cell;
  }
  :is(.flex, .flex-col, .flex-wrap):where([style*="--xxl_flex-dir:"]) {
    --_flexD: var(--xxl_flex-dir);
  }
  :is(.flex, .flex-col, .flex-wrap):where([style*="--xxl_flex-wrap:"]) {
    --_flexW: var(--xxl_flex-wrap);
  }
  .grid-cols:where([style*="--xxl_grid-cols:"]) {
    --_cols: var(--xxl_grid-cols);
  }
  .grid-cols > :where([style*="--xxl_row:"]) {
    --_gridIR: var(--xxl_row);
  }
  .grid-cols > :where([style*="--xxl_col:"]) {
    --_gridIC: var(--xxl_col);
  }
  .align:where([style*="--xxl_align:"]) {
    --_alignC: var(--xxl_align);
  }
  .align:where([style*="--xxl_align-items:"]) {
    --_alignI: var(--xxl_--align-items);
  }
  .align-self:where([style*="--xxl_align-self:"]) {
    --_alignS: var(--xxl_align-self);
  }
  .xxl\:sr-only {
    --_show: initial;
  }
  .xxl\:not-sr-only {
    --_show: /* */;
  }
}
html, body {
    padding: 0;
    margin: 0;
}
.message {
    padding-top: 2px;
    padding-bottom: 4px;
    text-align: center;
    font-size: 0.9em;
}
.message.demo {
        color: white;
        background-color: #ff1a1a;
    }
.header.links {
    background-color: #777;
    color: white;
    display: flex;
    justify-content: flex-end;
    text-align: right;
    list-style: none;
}
.header.links > li {
        margin: 0;
        padding: 10px;
    }
.action.skip.contentarea {
    display: none; /* @todo: Replicate sr-only */
}
.switcher.language {
    float: right;
}
.switcher.language .switcher-label {

    }
.switcher.language .actions.dropdown.switcher-options {
        display: none;
    }
.switcher.language .actions.dropdown.switcher-options ul {
            list-style: none;
            margin: 0;
        }
.switcher.language .actions.dropdown.switcher-options ul li {
                margin: 0;
            }
.switcher.language:hover .actions.dropdown.switcher-options {
        display: block;
    }
.panel.wrapper {
    background-color: #777;
    color: white;
    display: flex;
    justify-content: flex-end;
    text-align: right;
    list-style: none;
}
.panel.wrapper > li {
        margin: 0;
        padding: 10px;
    }
.header.content {
    margin: auto;
    width: 1280px;
    padding: 20px;
    display: flex;
    justify-content: space-between;
}
.header.content .action.nav-toggle {
        display: none; /* @todo */
    }
.header.content .minicart-wrapper {
        float: right;
    }
.header.content .minicart-wrapper .showcart:after {
                font-family: 'luma-icons';
                content: '\e611';
                display: inline-block;
            }
.header.content .block-search {
        align-self: flex-start;
        display: flex;
    }
.header.content .block-search .block-title {
            display: none;
        }
.header.content .block-search .block-content .field.search .label {
                    display: none;
                }
.header.content .logo {
        display: inline-block;
    }
.header.content .logo img {
            width: 200px;
        }
.nav-sections {
    background-color: #ddd;
}
.nav-sections .nav-sections-item-title {
        display: none;
    }
.nav-sections nav.navigation {
        margin: auto;
        width: 1280px;
    }
.nav-sections nav.navigation ul li.level0 {
                display: inline-block;
                padding: 10px;
            }
.nav-sections nav.navigation ul li.level0 ul.level0.submenu {
                    display: none;
                }
.nav-sections nav.navigation ul li.level0 ul.level0.submenu:hover {
                    }
.nav-sections nav.navigation ul li.level0 ul.level0.submenu li.level1 {
                        display: inline-block;
                    }
.nav-sections nav.navigation ul li.level0:hover ul.level0.submenu {
                        display: block;
                    }
/*
.message {
    @extend container;
    margin: 10px;
    padding: 5px;

    &.demo {
        background-color: var(--message-demo-color);
    }
}
*/
